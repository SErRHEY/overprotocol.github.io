"use strict";(self.webpackChunkover_docs=self.webpackChunkover_docs||[]).push([[497],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=o,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(k,i(i({ref:t},p),{},{components:r})):n.createElement(k,i({ref:t},p))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3149:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const a={title:"Run with Docker",description:"Installation guide using Docker",lang:"en"},i=void 0,l={unversionedId:"operators/advanced-guides/run-with-docker",id:"operators/advanced-guides/run-with-docker",title:"Run with Docker",description:"Installation guide using Docker",source:"@site/docs/operators/advanced-guides/run-with-docker.md",sourceDirName:"operators/advanced-guides",slug:"/operators/advanced-guides/run-with-docker",permalink:"/operators/advanced-guides/run-with-docker",draft:!1,editUrl:"https://github.com/overprotocol/overprotocol.github.io/edit/develop/docs/operators/advanced-guides/run-with-docker.md",tags:[],version:"current",frontMatter:{title:"Run with Docker",description:"Installation guide using Docker",lang:"en"},sidebar:"operatorsSidebar",previous:{title:"Command Line Options",permalink:"/operators/CLI-options/chronos"},next:{title:"OverProtocol Validator FAQs",permalink:"/operators/faqs"}},c={},s=[],p={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As both clients must communicate with each other via the Engine API, we highly recommend running with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose"),"\nas it eliminates the need to manage container networking manually."),(0,o.kt)("p",null,"We provide an official repository with useful scripts: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/overprotocol/docker-scripts"},"overprotocol/docker-scripts"),".\nHere is a brief guide to run a ",(0,o.kt)("strong",{parentName:"p"},"full Over Protocol node"),". For running a validator node, please refer to the repository."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Clone docker-scripts repo"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/overprotocol/docker-scripts.git\nmv docker-scripts overprotocol\ncd overprotocol\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Check if Docker is available"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker -v\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Export your public IP for discovery"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export PUBLIC_IP=$(curl -s ifconfig.me)\necho $PUBLIC_IP\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Initialize data directory and JWT token"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make init\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Run a full node"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose -f mainnet.yml up -d\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Health check your node"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl 127.0.0.1:3500/eth/v1/node/syncing | jq\n")),(0,o.kt)("p",null,"This will fetch the current status of the consensus client. If ",(0,o.kt)("inlineCode",{parentName:"p"},"sync_distance")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),", this means your node is well synchronized."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "head_slot": "22916",\n    "sync_distance": "0",\n    "is_syncing": false,\n    "is_optimistic": false,\n    "el_offline": false\n  }\n}\n')),(0,o.kt)("p",null,"For debugging purposes, you can check the logs with the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs kairos -f  # To inspect the execution client\ndocker logs chronos -f # To inspect the consensus client\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Congratulations!")," You\u2019re now running an OverProtocol node."))}d.isMDXComponent=!0}}]);