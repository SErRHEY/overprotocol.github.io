"use strict";(self.webpackChunkover_docs=self.webpackChunkover_docs||[]).push([[26],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>E});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),p=o,E=d["".concat(s,".").concat(p)]||d[p]||f[p]||r;return t?a.createElement(E,l(l({ref:n},u),{},{components:t})):a.createElement(E,l({ref:n},u))}));function E(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={title:"Command Line Options",description:"Geth command line options and sub-commands.",lang:"en"},l=void 0,i={unversionedId:"operators/CLI-options/kairos",id:"operators/CLI-options/kairos",title:"Command Line Options",description:"Geth command line options and sub-commands.",source:"@site/docs/operators/CLI-options/kairos.md",sourceDirName:"operators/CLI-options",slug:"/operators/CLI-options/kairos",permalink:"/operators/CLI-options/kairos",draft:!1,editUrl:"https://github.com/overprotocol/overprotocol.github.io/edit/develop/docs/operators/CLI-options/kairos.md",tags:[],version:"current",frontMatter:{title:"Command Line Options",description:"Geth command line options and sub-commands.",lang:"en"},sidebar:"operatorsSidebar",previous:{title:"Operate Validators",permalink:"/operators/operate-validators"},next:{title:"Command Line Options",permalink:"/operators/CLI-options/chronos"}},s={},c=[{value:"geth",id:"geth",level:3}],u={toc:c},d="wrapper";function f(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"geth"},"geth"),(0,o.kt)("p",null,"As the Kairos project is a fork of the Geth project, it provides most of the command line options available in geth. You can obtain information and descriptions of these options by using the command line ",(0,o.kt)("inlineCode",{parentName:"p"},"help")," in the Geth binary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"geth --help                                                                                                            \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'NAME:\n   geth - the kairos command line interface\n\nUSAGE:\n   geth [global options] command [command options] [arguments...]\n\nVERSION:\n   1.0.3-unstable-ff8c2d62-20240605\nq\nCOMMANDS:\n   account                Manage accounts\n   attach                 Start an interactive JavaScript environment (connect to node)\n   console                Start an interactive JavaScript environment\n   db                     Low level database operations\n   dump                   Dump a specific block from storage\n   dumpconfig             Export configuration values in a TOML format\n   dumpgenesis            Dumps genesis block JSON configuration to stdout\n   export                 Export blockchain into file\n   import                 Import a blockchain file\n   import-preimages       Import the preimage database from an RLP stream\n   init                   Bootstrap and initialize a new genesis block\n   js                     (DEPRECATED) Execute the specified JavaScript files\n   license                Display license information\n   removedb               Remove blockchain and state databases\n   show-deprecated-flags  Show flags that have been deprecated\n   snapshot               A set of commands based on the snapshot\n   verkle                 A set of experimental verkle tree management commands\n   version                Print version numbers\n   version-check          Checks (online) for known Geth security vulnerabilities\n   help, h                Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   ACCOUNT\n\n\n    --allow-insecure-unlock             (default: false)                   ($GETH_ALLOW_INSECURE_UNLOCK)\n          Allow insecure account unlocking when account-related RPCs are exposed by http\n\n    --keystore value                                                       ($GETH_KEYSTORE)\n          Directory for the keystore (default = inside the datadir)\n\n    --lightkdf                          (default: false)                   ($GETH_LIGHTKDF)\n          Reduce key-derivation RAM & CPU usage at some expense of KDF strength\n\n    --password value                                                       ($GETH_PASSWORD)\n          Password file to use for non-interactive password input\n\n    --pcscdpath value                                                      ($GETH_PCSCDPATH)\n          Path to the smartcard daemon (pcscd) socket file\n\n    --signer value                                                         ($GETH_SIGNER)\n          External signer (url or path to ipc file)\n\n    --unlock value                                                         ($GETH_UNLOCK)\n          Comma separated list of accounts to unlock\n\n    --usb                               (default: false)                   ($GETH_USB)\n          Enable monitoring and management of USB hardware wallets\n\n   ALIASED (deprecated)\n\n\n    --cache.trie.journal value                                             ($GETH_CACHE_TRIE_JOURNAL)\n          Disk journal directory for trie cache to survive node restarts\n\n    --cache.trie.rejournal value        (default: 0s)                      ($GETH_CACHE_TRIE_REJOURNAL)\n          Time interval to regenerate the trie cache journal\n\n    --log.backtrace value                                                  ($GETH_LOG_BACKTRACE)\n          Request a stack trace at a specific logging statement (deprecated)\n\n    --log.debug                         (default: false)                   ($GETH_LOG_DEBUG)\n          Prepends log messages with call-site location (deprecated)\n\n    --nousb                             (default: false)                   ($GETH_NOUSB)\n          Disables monitoring for and managing USB hardware wallets (deprecated)\n\n    --txlookuplimit value               (default: 2350000)                 ($GETH_TXLOOKUPLIMIT)\n          Number of recent blocks to maintain transactions index for (default = about one\n          year, 0 = entire chain) (deprecated, use history.transactions instead)\n\n    --v5disc                            (default: false)                   ($GETH_V5DISC)\n          Enables the experimental RLPx V5 (Topic Discovery) mechanism (deprecated, use\n          --discv5 instead)\n\n    --whitelist value                                                      ($GETH_WHITELIST)\n          Comma separated block number-to-hash mappings to enforce (<number>=<hash>)\n          (deprecated in favor of --eth.requiredblocks)\n\n   API AND CONSOLE\n\n\n    --authrpc.addr value                (default: "localhost")             ($GETH_AUTHRPC_ADDR)\n          Listening address for authenticated APIs\n\n    --authrpc.jwtsecret value                                              ($GETH_AUTHRPC_JWTSECRET)\n          Path to a JWT secret to use for authenticated RPC endpoints\n\n    --authrpc.port value                (default: 8551)                    ($GETH_AUTHRPC_PORT)\n          Listening port for authenticated APIs\n\n    --authrpc.vhosts value              (default: "localhost")             ($GETH_AUTHRPC_VHOSTS)\n          Comma separated list of virtual hostnames from which to accept requests (server\n          enforced). Accepts \'*\' wildcard.\n\n    --exec value                                                           ($GETH_EXEC)\n          Execute JavaScript statement\n\n    --graphql                           (default: false)                   ($GETH_GRAPHQL)\n          Enable GraphQL on the HTTP-RPC server. Note that GraphQL can only be started if\n          an HTTP server is started as well.\n\n    --graphql.corsdomain value                                             ($GETH_GRAPHQL_CORSDOMAIN)\n          Comma separated list of domains from which to accept cross origin requests\n          (browser enforced)\n\n    --graphql.vhosts value              (default: "localhost")             ($GETH_GRAPHQL_VHOSTS)\n          Comma separated list of virtual hostnames from which to accept requests (server\n          enforced). Accepts \'*\' wildcard.\n\n    --header value, -H value                                               ($GETH_HEADER)\n          Pass custom headers to the RPC server when using --remotedb or the geth attach\n          console. This flag can be given multiple times.\n\n    --http                              (default: false)                   ($GETH_HTTP)\n          Enable the HTTP-RPC server\n\n    --http.addr value                   (default: "localhost")             ($GETH_HTTP_ADDR)\n          HTTP-RPC server listening interface\n\n    --http.api value                                                       ($GETH_HTTP_API)\n          API\'s offered over the HTTP-RPC interface\n\n    --http.corsdomain value                                                ($GETH_HTTP_CORSDOMAIN)\n          Comma separated list of domains from which to accept cross origin requests\n          (browser enforced)\n\n    --http.port value                   (default: 8545)                    ($GETH_HTTP_PORT)\n          HTTP-RPC server listening port\n\n    --http.rpcprefix value                                                 ($GETH_HTTP_RPCPREFIX)\n          HTTP path path prefix on which JSON-RPC is served. Use \'/\' to serve on all\n          paths.\n\n    --http.vhosts value                 (default: "localhost")             ($GETH_HTTP_VHOSTS)\n          Comma separated list of virtual hostnames from which to accept requests (server\n          enforced). Accepts \'*\' wildcard.\n\n    --ipcdisable                        (default: false)                   ($GETH_IPCDISABLE)\n          Disable the IPC-RPC server\n\n    --ipcpath value                                                        ($GETH_IPCPATH)\n          Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\n    --jspath value                      (default: .)                       ($GETH_JSPATH)\n          JavaScript root path for `loadScript`\n\n    --preload value                                                        ($GETH_PRELOAD)\n          Comma separated list of JavaScript files to preload into the console\n\n    --rpc.allow-unprotected-txs         (default: false)                   ($GETH_RPC_ALLOW_UNPROTECTED_TXS)\n          Allow for unprotected (non EIP155 signed) transactions to be submitted via RPC\n\n    --rpc.batch-request-limit value     (default: 1000)                    ($GETH_RPC_BATCH_REQUEST_LIMIT)\n          Maximum number of requests in a batch\n\n    --rpc.batch-response-max-size value (default: 25000000)                ($GETH_RPC_BATCH_RESPONSE_MAX_SIZE)\n          Maximum number of bytes returned from a batched call\n\n    --rpc.enabledeprecatedpersonal      (default: false)                   ($GETH_RPC_ENABLEDEPRECATEDPERSONAL)\n          Enables the (deprecated) personal namespace\n\n    --rpc.evmtimeout value              (default: 5s)                      ($GETH_RPC_EVMTIMEOUT)\n          Sets a timeout used for eth_call (0=infinite)\n\n    --rpc.gascap value                  (default: 50000000)                ($GETH_RPC_GASCAP)\n          Sets a cap on gas that can be used in eth_call/estimateGas (0=infinite)\n\n    --rpc.txfeecap value                (default: 1)                       ($GETH_RPC_TXFEECAP)\n          Sets a cap on transaction fee (in ether) that can be sent via the RPC APIs (0 =\n          no cap)\n\n    --ws                                (default: false)                   ($GETH_WS)\n          Enable the WS-RPC server\n\n    --ws.addr value                     (default: "localhost")             ($GETH_WS_ADDR)\n          WS-RPC server listening interface\n\n    --ws.api value                                                         ($GETH_WS_API)\n          API\'s offered over the WS-RPC interface\n\n    --ws.origins value                                                     ($GETH_WS_ORIGINS)\n          Origins from which to accept websockets requests\n\n    --ws.port value                     (default: 8546)                    ($GETH_WS_PORT)\n          WS-RPC server listening port\n\n    --ws.rpcprefix value                                                   ($GETH_WS_RPCPREFIX)\n          HTTP path prefix on which JSON-RPC is served. Use \'/\' to serve on all paths.\n\n   DEVELOPER CHAIN\n\n\n    --dev                               (default: false)                   ($GETH_DEV)\n          Ephemeral proof-of-authority network with a pre-funded developer account, mining\n          enabled\n\n    --dev.gaslimit value                (default: 11500000)                ($GETH_DEV_GASLIMIT)\n          Initial block gas limit\n\n    --dev.period value                  (default: 0)                       ($GETH_DEV_PERIOD)\n          Block period to use in developer mode (0 = mine only if transaction pending)\n\n   ETH\n\n\n    --bloomfilter.size value            (default: 2048)                    ($GETH_BLOOMFILTER_SIZE)\n          Megabytes of memory allocated to bloom-filter for pruning\n\n    --config value                                                         ($GETH_CONFIG)\n          TOML configuration file\n\n    --creeper                           (default: false)                   ($GETH_CREEPER)\n          Creeper test network\n\n    --datadir value                     (default: /Users/leegunchul/Library/OverProtocol) ($GETH_DATADIR)\n          Data directory for the databases and keystore\n\n    --datadir.ancient value                                                ($GETH_DATADIR_ANCIENT)\n          Root directory for ancient data (default = inside chaindata)\n\n    --datadir.minfreedisk value                                            ($GETH_DATADIR_MINFREEDISK)\n          Minimum free disk space in MB, once reached triggers auto shut down (default =\n          --cache.gc converted to MB, 0 = disabled)\n\n    --dolphin                           (default: false)                   ($GETH_DOLPHIN)\n          Dolphin test network\n\n    --eth.requiredblocks value                                             ($GETH_ETH_REQUIREDBLOCKS)\n          Comma separated block number-to-hash mappings to require for peering\n          (<number>=<hash>)\n\n    --exitwhensynced                    (default: false)                   ($GETH_EXITWHENSYNCED)\n          Exits after block synchronisation completes\n\n    --mainnet                           (default: false)                   ($GETH_MAINNET)\n          Over Protocol mainnet\n\n    --networkid value                   (default: 0)                       ($GETH_NETWORKID)\n          Explicitly set network id (integer)(For testnets: use --creeper, --dolphin\n          instead)\n\n    --override.cancun value             (default: 0)                       ($GETH_OVERRIDE_CANCUN)\n          Manually specify the Cancun fork timestamp, overriding the bundled setting\n\n    --override.verkle value             (default: 0)                       ($GETH_OVERRIDE_VERKLE)\n          Manually specify the Verkle fork timestamp, overriding the bundled setting\n\n    --snapshot                          (default: true)                    ($GETH_SNAPSHOT)\n          Enables snapshot-database mode (default = enable)\n\n   GAS PRICE ORACLE\n\n\n    --gpo.blocks value                  (default: 20)                      ($GETH_GPO_BLOCKS)\n          Number of recent blocks to check for gas prices\n\n    --gpo.ignoreprice value             (default: 2)                       ($GETH_GPO_IGNOREPRICE)\n          Gas price below which gpo will ignore transactions\n\n    --gpo.maxprice value                (default: 500000000000)            ($GETH_GPO_MAXPRICE)\n          Maximum transaction priority fee (or gasprice before London fork) to be\n          recommended by gpo\n\n    --gpo.percentile value              (default: 60)                      ($GETH_GPO_PERCENTILE)\n          Suggested gas price is the given percentile of a set of recent transaction gas\n          prices\n\n   LIGHT CLIENT\n\n\n    --light.egress value                (default: 0)                       ($GETH_LIGHT_EGRESS)\n          Outgoing bandwidth limit for serving light clients (deprecated)\n\n    --light.ingress value               (default: 0)                       ($GETH_LIGHT_INGRESS)\n          Incoming bandwidth limit for serving light clients (deprecated)\n\n    --light.maxpeers value              (default: 100)                     ($GETH_LIGHT_MAXPEERS)\n          Maximum number of light clients to serve, or light servers to attach to\n          (deprecated)\n\n    --light.nopruning                   (default: false)                   ($GETH_LIGHT_NOPRUNING)\n          Disable ancient light chain data pruning (deprecated)\n\n    --light.nosyncserve                 (default: false)                   ($GETH_LIGHT_NOSYNCSERVE)\n          Enables serving light clients before syncing (deprecated)\n\n    --light.serve value                 (default: 0)                       ($GETH_LIGHT_SERVE)\n          Maximum percentage of time allowed for serving LES requests (deprecated)\n\n   LOGGING AND DEBUGGING\n\n\n    --log.compress                      (default: false)                   ($GETH_LOG_COMPRESS)\n          Compress the log files\n\n    --log.file value                                                       ($GETH_LOG_FILE)\n          Write logs to a file\n\n    --log.format value                                                     ($GETH_LOG_FORMAT)\n          Log format to use (json|logfmt|terminal)\n\n    --log.maxage value                  (default: 30)                      ($GETH_LOG_MAXAGE)\n          Maximum number of days to retain a log file\n\n    --log.maxbackups value              (default: 10)                      ($GETH_LOG_MAXBACKUPS)\n          Maximum number of log files to retain\n\n    --log.maxsize value                 (default: 100)                     ($GETH_LOG_MAXSIZE)\n          Maximum size in MBs of a single log file\n\n    --log.rotate                        (default: false)                   ($GETH_LOG_ROTATE)\n          Enables log file rotation\n\n    --log.vmodule value                                                    ($GETH_LOG_VMODULE)\n          Per-module verbosity: comma-separated list of <pattern>=<level> (e.g.\n          eth/*=5,p2p=4)\n\n    --nocompaction                      (default: false)                   ($GETH_NOCOMPACTION)\n          Disables db compaction after import\n\n    --pprof                             (default: false)                   ($GETH_PPROF)\n          Enable the pprof HTTP server\n\n    --pprof.addr value                  (default: "127.0.0.1")             ($GETH_PPROF_ADDR)\n          pprof HTTP server listening interface\n\n    --pprof.blockprofilerate value      (default: 0)                       ($GETH_PPROF_BLOCKPROFILERATE)\n          Turn on block profiling with the given rate\n\n    --pprof.cpuprofile value                                               ($GETH_PPROF_CPUPROFILE)\n          Write CPU profile to the given file\n\n    --pprof.memprofilerate value        (default: 524288)                  ($GETH_PPROF_MEMPROFILERATE)\n          Turn on memory profiling with the given rate\n\n    --pprof.port value                  (default: 6060)                    ($GETH_PPROF_PORT)\n          pprof HTTP server listening port\n\n    --remotedb value                                                       ($GETH_REMOTEDB)\n          URL for remote database\n\n    --trace value                                                          ($GETH_TRACE)\n          Write execution trace to the given file\n\n    --verbosity value                   (default: 3)                       ($GETH_VERBOSITY)\n          Logging verbosity: 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail\n\n   METRICS AND STATS\n\n\n    --ethstats value                                                       ($GETH_ETHSTATS)\n          Reporting URL of a ethstats service (nodename:secret@host:port)\n\n    --metrics                           (default: false)                   ($GETH_METRICS)\n          Enable metrics collection and reporting\n\n    --metrics.addr value                                                   ($GETH_METRICS_ADDR)\n          Enable stand-alone metrics HTTP server listening interface.\n\n    --metrics.expensive                 (default: false)                   ($GETH_METRICS_EXPENSIVE)\n          Enable expensive metrics collection and reporting\n\n    --metrics.influxdb                  (default: false)                   ($GETH_METRICS_INFLUXDB)\n          Enable metrics export/push to an external InfluxDB database\n\n    --metrics.influxdb.bucket value     (default: "geth")                  ($GETH_METRICS_INFLUXDB_BUCKET)\n          InfluxDB bucket name to push reported metrics to (v2 only)\n\n    --metrics.influxdb.database value   (default: "geth")                  ($GETH_METRICS_INFLUXDB_DATABASE)\n          InfluxDB database name to push reported metrics to\n\n    --metrics.influxdb.endpoint value   (default: "http://localhost:8086") ($GETH_METRICS_INFLUXDB_ENDPOINT)\n          InfluxDB API endpoint to report metrics to\n\n    --metrics.influxdb.organization value (default: "geth")                  ($GETH_METRICS_INFLUXDB_ORGANIZATION)\n          InfluxDB organization name (v2 only)\n\n    --metrics.influxdb.password value   (default: "test")                  ($GETH_METRICS_INFLUXDB_PASSWORD)\n          Password to authorize access to the database\n\n    --metrics.influxdb.tags value       (default: "host=localhost")        ($GETH_METRICS_INFLUXDB_TAGS)\n          Comma-separated InfluxDB tags (key/values) attached to all measurements\n\n    --metrics.influxdb.token value      (default: "test")                  ($GETH_METRICS_INFLUXDB_TOKEN)\n          Token to authorize access to the database (v2 only)\n\n    --metrics.influxdb.username value   (default: "test")                  ($GETH_METRICS_INFLUXDB_USERNAME)\n          Username to authorize access to the database\n\n    --metrics.influxdbv2                (default: false)                   ($GETH_METRICS_INFLUXDBV2)\n          Enable metrics export/push to an external InfluxDB v2 database\n\n    --metrics.port value                (default: 6060)                    ($GETH_METRICS_PORT)\n          Metrics HTTP server listening port.\n          Please note that --metrics.addr must be set\n          to start the server.\n\n   MINER\n\n\n    --mine                              (default: false)                   ($GETH_MINE)\n          Enable mining\n\n    --miner.etherbase value                                                ($GETH_MINER_ETHERBASE)\n          0x prefixed public address for block mining rewards\n\n    --miner.extradata value                                                ($GETH_MINER_EXTRADATA)\n          Block extra data set by the miner (default = client version)\n\n    --miner.gaslimit value              (default: 30000000)                ($GETH_MINER_GASLIMIT)\n          Target gas ceiling for mined blocks\n\n    --miner.gasprice value              (default: 0)                       ($GETH_MINER_GASPRICE)\n          Minimum gas price for mining a transaction\n\n    --miner.newpayload-timeout value    (default: 2s)                      ($GETH_MINER_NEWPAYLOAD_TIMEOUT)\n          Specify the maximum time allowance for creating a new payload\n\n    --miner.recommit value              (default: 2s)                      ($GETH_MINER_RECOMMIT)\n          Time interval to recreate the block being mined\n\n   MISC\n\n\n    --help, -h                          (default: false)                  \n          show help\n\n    --synctarget value                                                     ($GETH_SYNCTARGET)\n          Hash of the block to full sync to (dev testing feature)\n\n    --version, -v                       (default: false)                  \n          print the version\n\n   NETWORKING\n\n\n    --bootnodes value                                                      ($GETH_BOOTNODES)\n          Comma separated enode URLs for P2P discovery bootstrap\n\n    --discovery.dns value                                                  ($GETH_DISCOVERY_DNS)\n          Sets DNS discovery entry points (use "" to disable DNS)\n\n    --discovery.port value              (default: 30303)                   ($GETH_DISCOVERY_PORT)\n          Use a custom UDP port for P2P discovery\n\n    --discovery.v4, --discv4            (default: false)                   ($GETH_DISCOVERY_V4)\n          Enables the V4 discovery mechanism\n\n    --discovery.v5, --discv5            (default: true)                    ($GETH_DISCOVERY_V5)\n          Enables the experimental RLPx V5 (Topic Discovery) mechanism\n\n    --identity value                                                       ($GETH_IDENTITY)\n          Custom node name\n\n    --maxpeers value                    (default: 50)                      ($GETH_MAXPEERS)\n          Maximum number of network peers (network disabled if set to 0)\n\n    --maxpendpeers value                (default: 0)                       ($GETH_MAXPENDPEERS)\n          Maximum number of pending connection attempts (defaults used if set to 0)\n\n    --nat value                         (default: "any")                   ($GETH_NAT)\n          NAT port mapping mechanism (any|none|upnp|pmp|pmp:<IP>|extip:<IP>)\n\n    --netrestrict value                                                    ($GETH_NETRESTRICT)\n          Restricts network communication to the given IP networks (CIDR masks)\n\n    --nodekey value                                                        ($GETH_NODEKEY)\n          P2P node key file\n\n    --nodekeyhex value                                                     ($GETH_NODEKEYHEX)\n          P2P node key as hex (for testing)\n\n    --nodiscover                        (default: false)                   ($GETH_NODISCOVER)\n          Disables the peer discovery mechanism (manual peer addition)\n\n    --port value                        (default: 30303)                   ($GETH_PORT)\n          Network listening port\n\n   PERFORMANCE TUNING\n\n\n    --cache value                       (default: 1024)                    ($GETH_CACHE)\n          Megabytes of memory allocated to internal caching (default = 1024 mainnet full\n          node, 128 light mode)\n\n    --cache.blocklogs value             (default: 32)                      ($GETH_CACHE_BLOCKLOGS)\n          Size (in number of blocks) of the log cache for filtering\n\n    --cache.database value              (default: 50)                      ($GETH_CACHE_DATABASE)\n          Percentage of cache memory allowance to use for database io\n\n    --cache.gc value                    (default: 25)                      ($GETH_CACHE_GC)\n          Percentage of cache memory allowance to use for trie pruning (default = 25% full\n          mode, 0% archive mode)\n\n    --cache.noprefetch                  (default: false)                   ($GETH_CACHE_NOPREFETCH)\n          Disable heuristic state prefetch during block import (less CPU and disk IO, more\n          time waiting for data)\n\n    --cache.preimages                   (default: false)                   ($GETH_CACHE_PREIMAGES)\n          Enable recording the SHA3/keccak preimages of trie keys\n\n    --cache.snapshot value              (default: 10)                      ($GETH_CACHE_SNAPSHOT)\n          Percentage of cache memory allowance to use for snapshot caching (default = 10%\n          full mode, 20% archive mode)\n\n    --cache.trie value                  (default: 15)                      ($GETH_CACHE_TRIE)\n          Percentage of cache memory allowance to use for trie caching (default = 15% full\n          mode, 30% archive mode)\n\n    --crypto.kzg value                  (default: "gokzg")                 ($GETH_CRYPTO_KZG)\n          KZG library implementation to use; gokzg (recommended) or ckzg\n\n    --fdlimit value                     (default: 0)                       ($GETH_FDLIMIT)\n          Raise the open file descriptor resource limit (default = system fd limit)\n\n   STATE HISTORY MANAGEMENT\n\n\n    --epochlimit value                  (default: 2)                       ($GETH_EPOCHLIMIT)\n          Number of epochs to retain in database (default = 2, 0 = no limit)\n\n    --gcmode value                      (default: "full")                  ($GETH_GCMODE)\n          Blockchain garbage collection mode, only relevant in state.scheme=hash ("full",\n          "archive")\n\n    --history.disable                   (default: false)                   ($GETH_HISTORY_DISABLE)\n          Disable state history tracking\n\n    --history.state value               (default: 90000)                   ($GETH_HISTORY_STATE)\n          Number of recent blocks to retain state history for (default = 90,000 blocks, 0\n          = entire chain)\n\n    --history.transactions value        (default: 2350000)                 ($GETH_HISTORY_TRANSACTIONS)\n          Number of recent blocks to maintain transactions index for (default = about one\n          year, 0 = entire chain)\n\n    --state.scheme value                                                   ($GETH_STATE_SCHEME)\n          Scheme to use for storing kairos state (\'hash\' or \'path\')\n\n    --syncmode value                    (default: snap)                    ($GETH_SYNCMODE)\n          Blockchain sync mode ("snap" or "full")\n\n   TRANSACTION POOL (BLOB)\n\n\n    --blobpool.datacap value            (default: 10737418240)             ($GETH_BLOBPOOL_DATACAP)\n          Disk space to allocate for pending blob transactions (soft limit)\n\n    --blobpool.datadir value            (default: "blobpool")              ($GETH_BLOBPOOL_DATADIR)\n          Data directory to store blob transactions in\n\n    --blobpool.pricebump value          (default: 100)                     ($GETH_BLOBPOOL_PRICEBUMP)\n          Price bump percentage to replace an already existing blob transaction\n\n   TRANSACTION POOL (EVM)\n\n\n    --txpool.accountqueue value         (default: 64)                      ($GETH_TXPOOL_ACCOUNTQUEUE)\n          Maximum number of non-executable transaction slots permitted per account\n\n    --txpool.accountslots value         (default: 16)                      ($GETH_TXPOOL_ACCOUNTSLOTS)\n          Minimum number of executable transaction slots guaranteed per account\n\n    --txpool.globalqueue value          (default: 1024)                    ($GETH_TXPOOL_GLOBALQUEUE)\n          Maximum number of non-executable transaction slots for all accounts\n\n    --txpool.globalslots value          (default: 5120)                    ($GETH_TXPOOL_GLOBALSLOTS)\n          Maximum number of executable transaction slots for all accounts\n\n    --txpool.journal value              (default: "transactions.rlp")      ($GETH_TXPOOL_JOURNAL)\n          Disk journal for local transaction to survive node restarts\n\n    --txpool.lifetime value             (default: 3h0m0s)                  ($GETH_TXPOOL_LIFETIME)\n          Maximum amount of time non-executable transaction are queued\n\n    --txpool.locals value                                                  ($GETH_TXPOOL_LOCALS)\n          Comma separated accounts to treat as locals (no flush, priority inclusion)\n\n    --txpool.nolocals                   (default: false)                   ($GETH_TXPOOL_NOLOCALS)\n          Disables price exemptions for locally submitted transactions\n\n    --txpool.pricebump value            (default: 10)                      ($GETH_TXPOOL_PRICEBUMP)\n          Price bump percentage to replace an already existing transaction\n\n    --txpool.pricelimit value           (default: 1)                       ($GETH_TXPOOL_PRICELIMIT)\n          Minimum gas price tip to enforce for acceptance into the pool\n\n    --txpool.rejournal value            (default: 1h0m0s)                  ($GETH_TXPOOL_REJOURNAL)\n          Time interval to regenerate the local transaction journal\n\n   VIRTUAL MACHINE\n\n\n    --vmdebug                           (default: false)                   ($GETH_VMDEBUG)\n          Record information useful for VM and contract debugging\n\n')))}f.isMDXComponent=!0}}]);