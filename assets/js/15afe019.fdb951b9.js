"use strict";(self.webpackChunkover_docs=self.webpackChunkover_docs||[]).push([[981],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6264:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={title:"Operate Restoration Client",description:"Step-by-step guides of how to operate restoration client.",lang:"en"},i=void 0,s={unversionedId:"operators/operate-restoration-client",id:"operators/operate-restoration-client",title:"Operate Restoration Client",description:"Step-by-step guides of how to operate restoration client.",source:"@site/docs/operators/operate-restoration-client.md",sourceDirName:"operators",slug:"/operators/operate-restoration-client",permalink:"/operators/operate-restoration-client",draft:!1,editUrl:"https://github.com/overprotocol/overprotocol.github.io/edit/develop/docs/operators/operate-restoration-client.md",tags:[],version:"current",frontMatter:{title:"Operate Restoration Client",description:"Step-by-step guides of how to operate restoration client.",lang:"en"},sidebar:"operatorsSidebar",previous:{title:"Operate Validators",permalink:"/operators/operate-validators"},next:{title:"Command Line Options",permalink:"/operators/command-line-options"}},c={},p=[{value:"How to run a restoration client",id:"how-to-run-a-restoration-client",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To restore an expired account, you need to retrieve the proof of historical state. This requires running an execution client that stores historical state data. By operating both the execution client and the restoration client, you can help users restore expired accounts and receive additional rewards."),(0,o.kt)("h2",{id:"how-to-run-a-restoration-client"},"How to run a restoration client"),(0,o.kt)("p",null,"Restoration client is controlled using the command line. Here\u2019s how to set it up:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"restoration --help                                                                                                             \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'Usage of restoration:\n  -corsdomain string\n        Comma separated list of domains from which to accept cross origin requests (browser enforced) (default "*")\n  -ipc string\n        The ipc endpoint of a local geth node\n  -keystore string\n        Directory for the keystore (default = inside the datadir)\n  -minimum-reward string\n        Minimum reward for sending restoration transaction (default "1000000000000000000")\n  -passphrase string\n        Passphrase file for unlocking signer account\n  -port string\n        Server listening port (default ":32311")\n  -rpc string\n        The rpc endpoint of a local or remote geth node\n  -signer string\n        Signer address for signing restoration transaction and receiving reward\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The execution client must be synced with full sync mode and store an unlimited number of epochs."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"$ geth --syncmode full --epochLimit 0\n"))))}d.isMDXComponent=!0}}]);